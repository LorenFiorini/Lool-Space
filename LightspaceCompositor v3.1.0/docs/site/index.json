{
  "api/LightspaceCompositor.Compositor.html": {
    "href": "api/LightspaceCompositor.Compositor.html",
    "title": "Class Compositor | Lightspace Compositor Documentation",
    "keywords": "Class Compositor A compositor class containing API that interfaces with tracking, rendering and other relevant data. Inheritance Object Compositor Implements ICompositor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : LightspaceCompositor Assembly : LightspaceCompositor.dll Syntax public class Compositor : ICompositor Properties BufferSets Gets the available buffer sets. Declaration public BufferSet[] BufferSets { get; } Property Value Type Description BufferSet [] IsFullScreen Gets a value indicating whether the compositor renderer is in fullscreen or not. Declaration public bool IsFullScreen { get; } Property Value Type Description Boolean IsMaximized Gets a value indicating whether the compositing window is in maximized state or not. Declaration public bool IsMaximized { get; } Property Value Type Description Boolean Parameters Gets the compositor parameters. Declaration public ICompositorParameters Parameters { get; } Property Value Type Description ICompositorParameters StereoDevice Gets the current stereo device. Declaration public StereoDevice StereoDevice { get; } Property Value Type Description StereoDevice Tracking Gets the compositor tracking interface. Declaration public ITracking Tracking { get; } Property Value Type Description ITracking Methods GetCurrentPose() Gets the pose from current tracking device. Declaration public TrackedHeadPose GetCurrentPose() Returns Type Description TrackedHeadPose The tracking device pose. GetGraphicsAdapterInfo() Gets graphics adapter info where compositor is rendering. Declaration public GraphicsAdapterInfo GetGraphicsAdapterInfo() Returns Type Description GraphicsAdapterInfo Graphics adapter info. RenderFinish(Int32, TrackedHeadPose) Mark the end of rendering for the given buffer set. Declaration public void RenderFinish(int id, TrackedHeadPose pose) Parameters Type Name Description Int32 id The buffer set identifier. TrackedHeadPose pose The tracking pose to mark with the rendered frame. RenderStart() Signals compositor that rendering has started and returns a buffer set with render target views to render to. Declaration public BufferSet RenderStart() Returns Type Description BufferSet A buffer set to render to. Run() Starts the compositor renderer. Declaration public void Run() Shutdown() Shuts down the compositor renderer. Declaration public void Shutdown() WaitRenderStart() Waits for next compositor v-blank. Use this to sync renderer with compositor. Declaration public void WaitRenderStart() Implements ICompositor"
  },
  "api/LightspaceCompositor.CompositorParameters.html": {
    "href": "api/LightspaceCompositor.CompositorParameters.html",
    "title": "Class CompositorParameters | Lightspace Compositor Documentation",
    "keywords": "Class CompositorParameters A class containing various parameters used for interfacing with the compositing system. Inheritance Object CompositorParameters Implements ICompositorParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : LightspaceCompositor Assembly : LightspaceCompositor.dll Syntax public class CompositorParameters : ICompositorParameters Properties FarPlaneMeters Gets the far plane value in meters. Declaration public float FarPlaneMeters { get; } Property Value Type Description Single InterPupillaryDistanceMeters Gets or sets the inter-pupillary distance (IPD) in meters. Declaration public float InterPupillaryDistanceMeters { get; set; } Property Value Type Description Single InvertDepth Gets or sets a value indicating whether the depth values should be inverted or not. Compositor assumes that input depth values are in 0..1 closest to furthest range. Setting the property to 'true' will invert the values so that 1..0 will be closest to furthest. Declaration public bool InvertDepth { get; set; } Property Value Type Description Boolean LinearizeDepth Gets or sets a value indicating whether the depth should be linearized or not. Declaration public bool LinearizeDepth { get; set; } Property Value Type Description Boolean NearPlaneMeters Gets the near plane value in meters. Declaration public float NearPlaneMeters { get; } Property Value Type Description Single UseFogging Gets or sets a value indicating whether to use fogging or not. Declaration public bool UseFogging { get; set; } Property Value Type Description Boolean UseReprojection Gets or sets a value indicating whether the reprojection mode should be enabled or not. Declaration public bool UseReprojection { get; set; } Property Value Type Description Boolean Methods GetCalibratedProjectionMatrix(Eye) Attempts to get calibrated projection matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. Declaration public Matrix GetCalibratedProjectionMatrix(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description Matrix The calibrated view matrix or default projection matrix. GetCalibratedViewMatrix(Eye) Attempts to get the calibrated view matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. This tells where the camera rendering position should be set. Declaration public Matrix GetCalibratedViewMatrix(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description Matrix The calibrated view matrix or default view matrix. GetCalibrationIntrinsics(Eye) Attempts to get the calibration intrinsics for given eye when data is available. The values can be used to build required view and projection. Declaration public CalibrationIntrinsics GetCalibrationIntrinsics(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description CalibrationIntrinsics The calibration intrinsics when data is available or default. GetCalibrationStatus() Gets the current calibration status, i.e. availability and validation info. Declaration public CalibrationInfo GetCalibrationStatus() Returns Type Description CalibrationInfo The current calibration info. GetPixelOffsets(Eye) Gets the pixel offsets for the currently set IPD. These values represent by how many horizontal/vertical pixels the image needs to be shifted for the specified IPD. This adjustment is required for headsets that do not have mechanical IPD adjustment, so the image needs to be \"moved\" digitally. Declaration public Vector2 GetPixelOffsets(Eye eyeSide) Parameters Type Name Description Eye eyeSide Which eye the data is requested for, left or right. Returns Type Description Vector2 A 2d offset to move image, measured in pixels. SetPlanes(Single, Single) Sets the near and far plane values in meters. Declaration public void SetPlanes(float nearPlaneMeters, float farPlaneMeters) Parameters Type Name Description Single nearPlaneMeters The near plane value in meters. Single farPlaneMeters The far plane value in meters. Implements ICompositorParameters"
  },
  "api/LightspaceCompositor.Exceptions.CompositorException.html": {
    "href": "api/LightspaceCompositor.Exceptions.CompositorException.html",
    "title": "Class CompositorException | Lightspace Compositor Documentation",
    "keywords": "Class CompositorException An exception class that is thrown by the compositor. Inheritance Object Exception CompositorException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : LightspaceCompositor.Exceptions Assembly : LightspaceCompositor.dll Syntax public class CompositorException : Exception, ISerializable, _Exception Constructors CompositorException() Initializes a new instance of the CompositorException class. Declaration public CompositorException() CompositorException(String) Initializes a new instance of the CompositorException class. Declaration public CompositorException(string message) Parameters Type Name Description String message The message. CompositorException(String, Exception) Initializes a new instance of the CompositorException class. Declaration public CompositorException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/LightspaceCompositor.Exceptions.html": {
    "href": "api/LightspaceCompositor.Exceptions.html",
    "title": "Namespace LightspaceCompositor.Exceptions | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositor.Exceptions Classes CompositorException An exception class that is thrown by the compositor. InternalCompositorException An exception class that is thrown by the compositor internal components not caused by consumer."
  },
  "api/LightspaceCompositor.Exceptions.InternalCompositorException.html": {
    "href": "api/LightspaceCompositor.Exceptions.InternalCompositorException.html",
    "title": "Class InternalCompositorException | Lightspace Compositor Documentation",
    "keywords": "Class InternalCompositorException An exception class that is thrown by the compositor internal components not caused by consumer. Inheritance Object Exception InternalCompositorException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : LightspaceCompositor.Exceptions Assembly : LightspaceCompositor.dll Syntax public class InternalCompositorException : Exception, ISerializable, _Exception Constructors InternalCompositorException() Initializes a new instance of the InternalCompositorException class. Declaration public InternalCompositorException() InternalCompositorException(String) Initializes a new instance of the InternalCompositorException class. Declaration public InternalCompositorException(string message) Parameters Type Name Description String message The message. InternalCompositorException(String, Exception) Initializes a new instance of the InternalCompositorException class. Declaration public InternalCompositorException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/LightspaceCompositor.html": {
    "href": "api/LightspaceCompositor.html",
    "title": "Namespace LightspaceCompositor | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositor Classes Compositor A compositor class containing API that interfaces with tracking, rendering and other relevant data. CompositorParameters A class containing various parameters used for interfacing with the compositing system. Tracking A class used to interface with tracking service."
  },
  "api/LightspaceCompositor.Tracking.html": {
    "href": "api/LightspaceCompositor.Tracking.html",
    "title": "Class Tracking | Lightspace Compositor Documentation",
    "keywords": "Class Tracking A class used to interface with tracking service. Inheritance Object Tracking Implements ITracking Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : LightspaceCompositor Assembly : LightspaceCompositor.dll Syntax public class Tracking : ITracking Properties State Gets the tracking state. Declaration public TrackingState State { get; } Property Value Type Description TrackingState Methods GetCurrentTrackingProviderInfo() Gets the detailed information about current tracking provider, e.g. loaded plugin. Declaration public TrackingProviderDescription GetCurrentTrackingProviderInfo() Returns Type Description TrackingProviderDescription The information about tracking provider. GetTrackedObjectPoses(Single) Gets all tracked object poses. Declaration public IEnumerable<TrackedObjectPose> GetTrackedObjectPoses(float predictionTimeMs) Parameters Type Name Description Single predictionTimeMs The prediction time in milliseconds. Returns Type Description IEnumerable < TrackedObjectPose > An IEnumerable<T> of tracked object poses. SetTrackingPluginPath(String) Requests tracking service to load specified tracking plugin folder. Declaration public void SetTrackingPluginPath(string path) Parameters Type Name Description String path The path to tracking plugin. SetTrackingServiceProviderPath(String) Sets the tracking service provider (i.e. host) path. Declaration public void SetTrackingServiceProviderPath(string path) Parameters Type Name Description String path The path to tracking service provider. Implements ITracking"
  },
  "api/LightspaceCompositorContracts.BufferSet.html": {
    "href": "api/LightspaceCompositorContracts.BufferSet.html",
    "title": "Struct BufferSet | Lightspace Compositor Documentation",
    "keywords": "Struct BufferSet A struct representing a set of render target texture buffers used with the compositor renderer. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct BufferSet Fields ColorL Gets the description to the left color texture. Declaration public TextureDescription ColorL Field Value Type Description TextureDescription ColorR Gets the description to the right color texture. Declaration public TextureDescription ColorR Field Value Type Description TextureDescription DepthL Gets the description to the left depth texture. Declaration public TextureDescription DepthL Field Value Type Description TextureDescription DepthR Gets the description to the right depth texture. Declaration public TextureDescription DepthR Field Value Type Description TextureDescription Id Gets the buffer set Id. Declaration public int Id Field Value Type Description Int32"
  },
  "api/LightspaceCompositorContracts.CalibrationInfo.html": {
    "href": "api/LightspaceCompositorContracts.CalibrationInfo.html",
    "title": "Struct CalibrationInfo | Lightspace Compositor Documentation",
    "keywords": "Struct CalibrationInfo A struct describing calibration status and validation information. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct CalibrationInfo Fields IsValid A value indicating that calibration is valid. Declaration public bool IsValid Field Value Type Description Boolean State A value indicating current calibration state, i.e. availability. Declaration public CalibrationState State Field Value Type Description CalibrationState Timestamp Timestamp when the information was retrieved. Declaration public long Timestamp Field Value Type Description Int64"
  },
  "api/LightspaceCompositorContracts.CalibrationIntrinsics.html": {
    "href": "api/LightspaceCompositorContracts.CalibrationIntrinsics.html",
    "title": "Struct CalibrationIntrinsics | Lightspace Compositor Documentation",
    "keywords": "Struct CalibrationIntrinsics A structure describing OpenCV based camera calibration intrinsic parameters for image correction based on pinhole camera model for view (RX, RY, RZ, TX, TY, TZ components) and projection (FX, FY, CX, CY components) to create respective matrices. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct CalibrationIntrinsics Fields CX The X principal point that should be in the center of the image, i.e. pixel offset. Declaration public float CX Field Value Type Description Single CY The Y principal point that should be in the center of the image, i.e. pixel offset. Declaration public float CY Field Value Type Description Single FX The X focal length expressed in pixels. Declaration public float FX Field Value Type Description Single FY The Y focal length expressed in pixels. Declaration public float FY Field Value Type Description Single RX An Axis-Angle representation vector X component in radians. Declaration public float RX Field Value Type Description Single RY An Axis-Angle representation vector Y component in radians. Declaration public float RY Field Value Type Description Single RZ An Axis-Angle representation vector Z component in radians. Declaration public float RZ Field Value Type Description Single TX A translation vector Y component in meters. Declaration public float TX Field Value Type Description Single TY A translation vector Y component in meters. Declaration public float TY Field Value Type Description Single TZ A translation vector Z component in meters. Declaration public float TZ Field Value Type Description Single"
  },
  "api/LightspaceCompositorContracts.CalibrationState.html": {
    "href": "api/LightspaceCompositorContracts.CalibrationState.html",
    "title": "Enum CalibrationState | Lightspace Compositor Documentation",
    "keywords": "Enum CalibrationState An enum describing calibration state, i.e. availability. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum CalibrationState : int Fields Name Description Faulted The calibration is faulted, i.e. failed to load. Loaded The calibration is loaded and available. Loading The calibration is currently loading. Unavailable The calibration is unavailable."
  },
  "api/LightspaceCompositorContracts.CompositorConstants.html": {
    "href": "api/LightspaceCompositorContracts.CompositorConstants.html",
    "title": "Class CompositorConstants | Lightspace Compositor Documentation",
    "keywords": "Class CompositorConstants Class for defining common Compositor constants (e.g. name of the pipe for client/host to talk on). Inheritance Object CompositorConstants Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public static class CompositorConstants : object Fields CompositorClientHostPipeName The name of the pipe for the host service to open and client service to connect to. Declaration public const string CompositorClientHostPipeName = null Field Value Type Description String"
  },
  "api/LightspaceCompositorContracts.Eye.html": {
    "href": "api/LightspaceCompositorContracts.Eye.html",
    "title": "Enum Eye | Lightspace Compositor Documentation",
    "keywords": "Enum Eye An eye enum associated with the stereoscopic rendering. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum Eye : int Fields Name Description Left The left eye. Right The right eye."
  },
  "api/LightspaceCompositorContracts.GraphicsAdapterInfo.html": {
    "href": "api/LightspaceCompositorContracts.GraphicsAdapterInfo.html",
    "title": "Struct GraphicsAdapterInfo | Lightspace Compositor Documentation",
    "keywords": "Struct GraphicsAdapterInfo A struct representing graphics adapter information. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct GraphicsAdapterInfo Fields AdapterDescription Graphics adapter description. Declaration public string AdapterDescription Field Value Type Description String AdapterDeviceId Graphics adapter device id. Declaration public int AdapterDeviceId Field Value Type Description Int32 AdapterLuid Graphics adapter luid where compositor is rendering. Declaration public long AdapterLuid Field Value Type Description Int64 AdapterOrderId Graphics adapter order id in graphics adapter list. Declaration public int AdapterOrderId Field Value Type Description Int32 OutputDeviceName Graphics adapters output device name. Declaration public string OutputDeviceName Field Value Type Description String"
  },
  "api/LightspaceCompositorContracts.html": {
    "href": "api/LightspaceCompositorContracts.html",
    "title": "Namespace LightspaceCompositorContracts | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositorContracts Classes CompositorConstants Class for defining common Compositor constants (e.g. name of the pipe for client/host to talk on). Structs BufferSet A struct representing a set of render target texture buffers used with the compositor renderer. CalibrationInfo A struct describing calibration status and validation information. CalibrationIntrinsics A structure describing OpenCV based camera calibration intrinsic parameters for image correction based on pinhole camera model for view (RX, RY, RZ, TX, TY, TZ components) and projection (FX, FY, CX, CY components) to create respective matrices. GraphicsAdapterInfo A struct representing graphics adapter information. Matrix Represents a 4x4 mathematical matrix. Quaternion Represents a four dimensional mathematical quaternion. StereoDevice A structure representing a stereo device, e.g. AR headset. TextureDescription A struct describing texture used by compositor. The available textures are packed in BufferSet objects that are coordinated by scheduler. The texture description can be used to create e.g. RTVs, SRVs to the texture from rendering (external) device. TrackedHeadPose Class representing the tracked head pose (position and rotation). TrackedObjectPose Class representing the tracked objects pose (position and rotation). TrackingProviderDescription An struct describing tracking pose provider. Vector2 Class representing a 2D Vector. Vector3 Class representing a 3D Vector. Interfaces ICompositor An interface for compositor classes containing API that interfaces with tracking, rendering and other relevant data. ICompositorParameters Interface for a Compositor Parameters implementation, a class with various parameters used for interfacing with the Compositor system. ITracking An interface used to configure and communicate with tracking service. Enums CalibrationState An enum describing calibration state, i.e. availability. Eye An eye enum associated with the stereoscopic rendering. StereoDeviceModel An enum representing StereoDevice model. TextureFormat An enum describing supported compositor texture formats. TrackedObjectType The tracked object type. TrackingState An enum describing tracking state."
  },
  "api/LightspaceCompositorContracts.ICompositor.html": {
    "href": "api/LightspaceCompositorContracts.ICompositor.html",
    "title": "Interface ICompositor | Lightspace Compositor Documentation",
    "keywords": "Interface ICompositor An interface for compositor classes containing API that interfaces with tracking, rendering and other relevant data. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public interface ICompositor Properties BufferSets Gets the available buffer sets. Declaration BufferSet[] BufferSets { get; } Property Value Type Description BufferSet [] IsFullScreen Gets a value indicating whether the compositor renderer is in fullscreen or not. Declaration bool IsFullScreen { get; } Property Value Type Description Boolean IsMaximized Gets a value indicating whether the compositing window is in maximized state or not. Declaration bool IsMaximized { get; } Property Value Type Description Boolean Parameters Gets the compositor parameters. Declaration ICompositorParameters Parameters { get; } Property Value Type Description ICompositorParameters StereoDevice Gets the current stereo device. Declaration StereoDevice StereoDevice { get; } Property Value Type Description StereoDevice Tracking Gets the compositor tracking interface. Declaration ITracking Tracking { get; } Property Value Type Description ITracking Methods GetCurrentPose() Gets the pose from current tracking device. Declaration TrackedHeadPose GetCurrentPose() Returns Type Description TrackedHeadPose The tracking device pose. GetGraphicsAdapterInfo() Gets graphics adapter info where compositor is rendering. Declaration GraphicsAdapterInfo GetGraphicsAdapterInfo() Returns Type Description GraphicsAdapterInfo Graphics adapter Luid and graphics adapter outputs device name. RenderFinish(Int32, TrackedHeadPose) Mark the end of rendering for the given buffer set. Declaration void RenderFinish(int id, TrackedHeadPose pose) Parameters Type Name Description Int32 id The buffer set identifier. TrackedHeadPose pose The tracking pose to mark with the rendered frame. RenderStart() Signals compositor that rendering has started and returns a buffer set with render target views to render to. Declaration BufferSet RenderStart() Returns Type Description BufferSet A buffer set to render to. Run() Starts the compositor renderer. Declaration void Run() Shutdown() Shuts down the compositor renderer. Declaration void Shutdown() WaitRenderStart() Waits for next compositor v-blank. Use this to sync renderer with compositor. Declaration void WaitRenderStart()"
  },
  "api/LightspaceCompositorContracts.ICompositorParameters.html": {
    "href": "api/LightspaceCompositorContracts.ICompositorParameters.html",
    "title": "Interface ICompositorParameters | Lightspace Compositor Documentation",
    "keywords": "Interface ICompositorParameters Interface for a Compositor Parameters implementation, a class with various parameters used for interfacing with the Compositor system. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public interface ICompositorParameters Properties FarPlaneMeters Gets the far plane value in meters. Declaration float FarPlaneMeters { get; } Property Value Type Description Single InterPupillaryDistanceMeters Gets or sets the inter-pupillary distance (IPD) in meters. Declaration float InterPupillaryDistanceMeters { get; set; } Property Value Type Description Single InvertDepth Gets or sets a value indicating whether the depth values should be inverted or not. Compositor assumes that input depth values are in 0..1 closest to furthest range. Setting the property to 'true' will invert the values so that 1..0 will be closest to furthest. Declaration bool InvertDepth { get; set; } Property Value Type Description Boolean LinearizeDepth Gets or sets a value indicating whether the depth should be linearized or not. Declaration bool LinearizeDepth { get; set; } Property Value Type Description Boolean NearPlaneMeters Gets the near plane value in meters. Declaration float NearPlaneMeters { get; } Property Value Type Description Single UseFogging Gets or sets a value indicating whether to use fogging or not. Declaration bool UseFogging { get; set; } Property Value Type Description Boolean UseReprojection Gets or sets a value indicating whether the reprojection mode should be enabled or not. Declaration bool UseReprojection { get; set; } Property Value Type Description Boolean Methods GetCalibratedProjectionMatrix(Eye) Attempts to get calibrated projection matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. Declaration Matrix GetCalibratedProjectionMatrix(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description Matrix The calibrated view matrix or default projection matrix. GetCalibratedViewMatrix(Eye) Attempts to get the calibrated view matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. This tells where the camera rendering position should be set. Declaration Matrix GetCalibratedViewMatrix(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description Matrix The calibrated view matrix or default view matrix. GetCalibrationIntrinsics(Eye) Attempts to get the calibration intrinsics for given eye when data is available. The values can be used to build required view and projection. Declaration CalibrationIntrinsics GetCalibrationIntrinsics(Eye eye) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Returns Type Description CalibrationIntrinsics The calibration intrinsics when data is available or default. GetCalibrationStatus() Gets the current calibration status, i.e. availability and validation info. Declaration CalibrationInfo GetCalibrationStatus() Returns Type Description CalibrationInfo The current calibration info. GetPixelOffsets(Eye) Gets the pixel offsets for the currently set IPD. These values represent by how many horizontal/vertical pixels the image needs to be shifted for the specified IPD. This adjustment is required for headsets that do not have mechanical IPD adjustment, so the image needs to be \"moved\" digitally. Declaration Vector2 GetPixelOffsets(Eye eyeSide) Parameters Type Name Description Eye eyeSide Which eye the data is requested for, left or right. Returns Type Description Vector2 A 2d offset to move image, measured in pixels. SetPlanes(Single, Single) Sets the near and far plane values in meters. Declaration void SetPlanes(float nearPlaneMeters, float farPlaneMeters) Parameters Type Name Description Single nearPlaneMeters The near plane value in meters. Single farPlaneMeters The far plane value in meters."
  },
  "api/LightspaceCompositorContracts.ITracking.html": {
    "href": "api/LightspaceCompositorContracts.ITracking.html",
    "title": "Interface ITracking | Lightspace Compositor Documentation",
    "keywords": "Interface ITracking An interface used to configure and communicate with tracking service. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public interface ITracking Properties State Gets the current active tracking mode. Declaration TrackingState State { get; } Property Value Type Description TrackingState Methods GetCurrentTrackingProviderInfo() Gets the detailed information about current tracking provider, e.g. loaded plugin. Declaration TrackingProviderDescription GetCurrentTrackingProviderInfo() Returns Type Description TrackingProviderDescription The information about tracking provider. GetTrackedObjectPoses(Single) Gets all tracked object poses. Declaration IEnumerable<TrackedObjectPose> GetTrackedObjectPoses(float predictionTimeMs) Parameters Type Name Description Single predictionTimeMs The prediction time in milliseconds. Returns Type Description IEnumerable < TrackedObjectPose > An of tracked object poses. SetTrackingPluginPath(String) Requests tracking service to load specified tracking plugin folder. Declaration void SetTrackingPluginPath(string path) Parameters Type Name Description String path The path to tracking plugin. SetTrackingServiceProviderPath(String) Sets the tracking service provider (i.e. host) path. Declaration void SetTrackingServiceProviderPath(string path) Parameters Type Name Description String path The path to tracking service provider."
  },
  "api/LightspaceCompositorContracts.Matrix.html": {
    "href": "api/LightspaceCompositorContracts.Matrix.html",
    "title": "Struct Matrix | Lightspace Compositor Documentation",
    "keywords": "Struct Matrix Represents a 4x4 mathematical matrix. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct Matrix Fields Identity The identity Matrix . Declaration public static readonly Matrix Identity Field Value Type Description Matrix M11 Value at row 1 column 1 of the matrix. Declaration public float M11 Field Value Type Description Single M12 Value at row 1 column 2 of the matrix. Declaration public float M12 Field Value Type Description Single M13 Value at row 1 column 3 of the matrix. Declaration public float M13 Field Value Type Description Single M14 Value at row 1 column 4 of the matrix. Declaration public float M14 Field Value Type Description Single M21 Value at row 2 column 1 of the matrix. Declaration public float M21 Field Value Type Description Single M22 Value at row 2 column 2 of the matrix. Declaration public float M22 Field Value Type Description Single M23 Value at row 2 column 3 of the matrix. Declaration public float M23 Field Value Type Description Single M24 Value at row 2 column 4 of the matrix. Declaration public float M24 Field Value Type Description Single M31 Value at row 3 column 1 of the matrix. Declaration public float M31 Field Value Type Description Single M32 Value at row 3 column 2 of the matrix. Declaration public float M32 Field Value Type Description Single M33 Value at row 3 column 3 of the matrix. Declaration public float M33 Field Value Type Description Single M34 Value at row 3 column 4 of the matrix. Declaration public float M34 Field Value Type Description Single M41 Value at row 4 column 1 of the matrix. Declaration public float M41 Field Value Type Description Single M42 Value at row 4 column 2 of the matrix. Declaration public float M42 Field Value Type Description Single M43 Value at row 4 column 3 of the matrix. Declaration public float M43 Field Value Type Description Single M44 Value at row 4 column 4 of the matrix. Declaration public float M44 Field Value Type Description Single Methods RotationQuaternion(Quaternion) Creates a rotation matrix from a quaternion. Declaration public static Matrix RotationQuaternion(Quaternion rotation) Parameters Type Name Description Quaternion rotation The quaternion to use to build the matrix. Returns Type Description Matrix The created rotation matrix. RotationQuaternion(ref Quaternion, out Matrix) Creates a rotation matrix from a quaternion. Declaration public static void RotationQuaternion(ref Quaternion rotation, out Matrix result) Parameters Type Name Description Quaternion rotation The quaternion to use to build the matrix. Matrix result The created rotation matrix."
  },
  "api/LightspaceCompositorContracts.Quaternion.html": {
    "href": "api/LightspaceCompositorContracts.Quaternion.html",
    "title": "Struct Quaternion | Lightspace Compositor Documentation",
    "keywords": "Struct Quaternion Represents a four dimensional mathematical quaternion. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct Quaternion Constructors Quaternion(Single, Single, Single, Single) Initializes a new instance of the Quaternion struct. Declaration public Quaternion(float x, float y, float z, float w) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. Single w The w component. Fields Identity An identity quaternion. Declaration public static readonly Quaternion Identity Field Value Type Description Quaternion W The W component of the quaternion. Declaration public float W Field Value Type Description Single X The X component of the quaternion. Declaration public float X Field Value Type Description Single Y The Y component of the quaternion. Declaration public float Y Field Value Type Description Single Z The Z component of the quaternion. Declaration public float Z Field Value Type Description Single Zero A default quaternion. Declaration public static readonly Quaternion Zero Field Value Type Description Quaternion Properties Angle Gets the quaternion's angle. Declaration public readonly float Angle { get; } Property Value Type Description Single Axis Gets the axis components of the quaternion. Declaration public readonly Vector3 Axis { get; } Property Value Type Description Vector3 Methods Invert() Conjugates and renormalizes the quaternion. Declaration public void Invert() Invert(Quaternion) Conjugates and renormalizes the quaternion. Declaration public static Quaternion Invert(Quaternion value) Parameters Type Name Description Quaternion value The quaternion to conjugate and renormalize. Returns Type Description Quaternion The conjugated and renormalized quaternion. Invert(ref Quaternion, out Quaternion) Conjugates and renormalizes the quaternion. Declaration public static void Invert(ref Quaternion value, out Quaternion result) Parameters Type Name Description Quaternion value The quaternion to conjugate and renormalize. Quaternion result When the method completes, contains the conjugated and renormalized quaternion. IsNaN(Quaternion) Determines whether the quaternion contains NaN values. Declaration public static bool IsNaN(Quaternion q) Parameters Type Name Description Quaternion q The quaternion to evaluate. Returns Type Description Boolean True, if one of the quaternion components contains a NaN value. False, otherwise. LengthSquared() Calculates the squared length of the quaternion. Declaration public float LengthSquared() Returns Type Description Single The squared length of the quaternion. Multiply(ref Quaternion, ref Quaternion, out Quaternion) Multiplies a quaternion by another. Declaration public static void Multiply(ref Quaternion left, ref Quaternion right, out Quaternion result) Parameters Type Name Description Quaternion left The first quaternion to multiply. Quaternion right The second quaternion to multiply. Quaternion result When the method completes, contains the multiplied quaternion. RotationYawPitchRoll(Single, Single, Single) Creates a quaternion given a yaw, pitch, and roll value. Declaration public static Quaternion RotationYawPitchRoll(float yaw, float pitch, float roll) Parameters Type Name Description Single yaw The yaw of rotation. Single pitch The pitch of rotation. Single roll The roll of rotation. Returns Type Description Quaternion The newly created quaternion. RotationYawPitchRoll(Single, Single, Single, out Quaternion) Creates a quaternion given a yaw, pitch, and roll value. Declaration public static void RotationYawPitchRoll(float yaw, float pitch, float roll, out Quaternion result) Parameters Type Name Description Single yaw The yaw of rotation. Single pitch The pitch of rotation. Single roll The roll of rotation. Quaternion result When the method completes, contains the newly created quaternion. Operators Multiply(Quaternion, Quaternion) Multiplies a quaternion by another. Declaration public static Quaternion operator *(Quaternion left, Quaternion right) Parameters Type Name Description Quaternion left The first quaternion to multiply. Quaternion right The second quaternion to multiply. Returns Type Description Quaternion The multiplied quaternion."
  },
  "api/LightspaceCompositorContracts.StereoDevice.html": {
    "href": "api/LightspaceCompositorContracts.StereoDevice.html",
    "title": "Struct StereoDevice | Lightspace Compositor Documentation",
    "keywords": "Struct StereoDevice A structure representing a stereo device, e.g. AR headset. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct StereoDevice Fields HorizontalFovDeg Gets or sets the horizontal field of view in degrees. Declaration public float HorizontalFovDeg Field Value Type Description Single Manufacturer Gets or sets the manufacturer company name. Declaration public string Manufacturer Field Value Type Description String Model Gets or sets the device model. Declaration public StereoDeviceModel Model Field Value Type Description StereoDeviceModel Name Gets or sets the device name. Declaration public string Name Field Value Type Description String VerticalFovDeg Gets or sets the vertical field of view in degrees. Declaration public float VerticalFovDeg Field Value Type Description Single"
  },
  "api/LightspaceCompositorContracts.StereoDeviceModel.html": {
    "href": "api/LightspaceCompositorContracts.StereoDeviceModel.html",
    "title": "Enum StereoDeviceModel | Lightspace Compositor Documentation",
    "keywords": "Enum StereoDeviceModel An enum representing StereoDevice model. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum StereoDeviceModel : int Fields Name Description Ig1000 The \"IG1000\" AR headset. Ig1000Demo The legacy \"IG1000-demo\" AR headset. Ig1050 The \"IG1050\" AR headset. Ig2000Lab The \"IG2000-Lab\" AR headset. Other An unknown device model. Virtual A virtual device."
  },
  "api/LightspaceCompositorContracts.TextureDescription.html": {
    "href": "api/LightspaceCompositorContracts.TextureDescription.html",
    "title": "Struct TextureDescription | Lightspace Compositor Documentation",
    "keywords": "Struct TextureDescription A struct describing texture used by compositor. The available textures are packed in BufferSet objects that are coordinated by scheduler. The texture description can be used to create e.g. RTVs, SRVs to the texture from rendering (external) device. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct TextureDescription Fields Eye Gets eye associated with the texture. Declaration public Eye Eye Field Value Type Description Eye Format Gets the texture data format, see TextureFormat for possible formats. Declaration public TextureFormat Format Field Value Type Description TextureFormat Handle Gets the shared texture handle. Declaration public IntPtr Handle Field Value Type Description IntPtr Height Gets the texture height in pixels. Declaration public int Height Field Value Type Description Int32 Width Gets the texture width in pixels. Declaration public int Width Field Value Type Description Int32"
  },
  "api/LightspaceCompositorContracts.TextureFormat.html": {
    "href": "api/LightspaceCompositorContracts.TextureFormat.html",
    "title": "Enum TextureFormat | Lightspace Compositor Documentation",
    "keywords": "Enum TextureFormat An enum describing supported compositor texture formats. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum TextureFormat : int Fields Name Description R32G8X24_T The 64-bit R32G8X24 typeless texture format. R8G8B8A8_UN The 32-bit R8G8B8A8 unsigned normalized integer texture format."
  },
  "api/LightspaceCompositorContracts.TrackedHeadPose.html": {
    "href": "api/LightspaceCompositorContracts.TrackedHeadPose.html",
    "title": "Struct TrackedHeadPose | Lightspace Compositor Documentation",
    "keywords": "Struct TrackedHeadPose Class representing the tracked head pose (position and rotation). Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct TrackedHeadPose Fields Default A default tracked head pose. Declaration public static readonly TrackedHeadPose Default Field Value Type Description TrackedHeadPose Rotation Gets the rotation quaternion. Declaration public Quaternion Rotation Field Value Type Description Quaternion Timestamp Timestamp when tracked object was retrieved. Declaration public long Timestamp Field Value Type Description Int64 Translation Gets translation vector. Declaration public Vector3 Translation Field Value Type Description Vector3"
  },
  "api/LightspaceCompositorContracts.TrackedObjectPose.html": {
    "href": "api/LightspaceCompositorContracts.TrackedObjectPose.html",
    "title": "Struct TrackedObjectPose | Lightspace Compositor Documentation",
    "keywords": "Struct TrackedObjectPose Class representing the tracked objects pose (position and rotation). Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct TrackedObjectPose Fields Acceleration Gets the measured positional acceleration. Declaration public Vector3 Acceleration Field Value Type Description Vector3 AngularAcceleration Gets the angular acceleration (how quickly the angular velocity is changing). Declaration public Vector3 AngularAcceleration Field Value Type Description Vector3 AngularVelocity Gets the angular velocity (i.e. how quickly the user is turning their head). Declaration public Vector3 AngularVelocity Field Value Type Description Vector3 Id Gets tracked object ID. Declaration public int Id Field Value Type Description Int32 IsPredicted Gets a value indicating whether this pose has been generated through prediction, or is a raw value from the position sensor. Declaration public bool IsPredicted Field Value Type Description Boolean IsValid Gets a value indicating whether this pose is valid. Declaration public bool IsValid Field Value Type Description Boolean Rotation Gets the rotation quaternion. Declaration public Quaternion Rotation Field Value Type Description Quaternion Timestamp Timestamp when tracked object was retrieved. Declaration public long Timestamp Field Value Type Description Int64 TrackedObjectType Tracked object type. Declaration public TrackedObjectType TrackedObjectType Field Value Type Description TrackedObjectType Translation Gets translation vector. Declaration public Vector3 Translation Field Value Type Description Vector3 Velocity Gets the measured positional velocity. Declaration public Vector3 Velocity Field Value Type Description Vector3"
  },
  "api/LightspaceCompositorContracts.TrackedObjectType.html": {
    "href": "api/LightspaceCompositorContracts.TrackedObjectType.html",
    "title": "Enum TrackedObjectType | Lightspace Compositor Documentation",
    "keywords": "Enum TrackedObjectType The tracked object type. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum TrackedObjectType : int Fields Name Description Controller Tracked object that is controller. Generic The generic (unspecified) tracked object. HMD The tracked head mounted display. Marker Tracked object that is marker. ReferencePlane Tracked object that is reference plane. TrackerReference Tracked object that is tracker reference. Unknown The tracked object is undefined."
  },
  "api/LightspaceCompositorContracts.TrackingProviderDescription.html": {
    "href": "api/LightspaceCompositorContracts.TrackingProviderDescription.html",
    "title": "Struct TrackingProviderDescription | Lightspace Compositor Documentation",
    "keywords": "Struct TrackingProviderDescription An struct describing tracking pose provider. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct TrackingProviderDescription Fields Manufacturer The manufacturer of tracking pose provider plugin manufacturer. Declaration public string Manufacturer Field Value Type Description String Name The name of tracking pose provider plugin. Declaration public string Name Field Value Type Description String PredictionModel The used prediction model description. Declaration public string PredictionModel Field Value Type Description String"
  },
  "api/LightspaceCompositorContracts.TrackingState.html": {
    "href": "api/LightspaceCompositorContracts.TrackingState.html",
    "title": "Enum TrackingState | Lightspace Compositor Documentation",
    "keywords": "Enum TrackingState An enum describing tracking state. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public enum TrackingState : int Fields Name Description Faulted The tracking service is faulted and unavailable. Initializing The tracking service is in initialization process. Running The tracking service is running normally. Stopped The tracking service is stopped or uninitialized."
  },
  "api/LightspaceCompositorContracts.Vector2.html": {
    "href": "api/LightspaceCompositorContracts.Vector2.html",
    "title": "Struct Vector2 | Lightspace Compositor Documentation",
    "keywords": "Struct Vector2 Class representing a 2D Vector. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct Vector2 Constructors Vector2(Single, Single) Initializes a new instance of the Vector2 struct. Declaration public Vector2(float x, float y) Parameters Type Name Description Single x The x component. Single y The y component. Fields X The X component of the vector. Declaration public float X Field Value Type Description Single Y The Y component of the vector. Declaration public float Y Field Value Type Description Single"
  },
  "api/LightspaceCompositorContracts.Vector3.html": {
    "href": "api/LightspaceCompositorContracts.Vector3.html",
    "title": "Struct Vector3 | Lightspace Compositor Documentation",
    "keywords": "Struct Vector3 Class representing a 3D Vector. Namespace : LightspaceCompositorContracts Assembly : LightspaceCompositorContracts.dll Syntax public struct Vector3 Constructors Vector3(Single, Single, Single) Initializes a new instance of the Vector3 struct. Declaration public Vector3(float x, float y, float z) Parameters Type Name Description Single x The x component. Single y The y component. Single z The z component. Fields X The X component of the vector. Declaration public float X Field Value Type Description Single Y The Y component of the vector. Declaration public float Y Field Value Type Description Single Z The Z component of the vector. Declaration public float Z Field Value Type Description Single Zero A default vector. Declaration public static readonly Vector3 Zero Field Value Type Description Vector3 Methods Cross(Vector3, Vector3) Calculates the cross product of two vectors. Declaration public static Vector3 Cross(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. Returns Type Description Vector3 The cross product of the two vectors. Dot(Vector3, Vector3) Calculates the dot product of two vectors. Declaration public static float Dot(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left First source vector. Vector3 right Second source vector. Returns Type Description Single When the method completes, contains the dot product of the two vectors. Length() Calculates the length of this vector. Declaration public float Length() Returns Type Description Single Vector's length. Normalize() Converts the vector into a unit vector. Declaration public void Normalize() Transform(Vector3, Quaternion) Transforms a 3D vector by the given Quaternion rotation. Declaration public static Vector3 Transform(Vector3 vector, Quaternion rotation) Parameters Type Name Description Vector3 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Returns Type Description Vector3 The transformed Vector3 . Transform(ref Vector3, ref Quaternion, out Vector3) Transforms a 3D vector by the given Quaternion rotation. Declaration public static void Transform(ref Vector3 vector, ref Quaternion rotation, out Vector3 result) Parameters Type Name Description Vector3 vector The vector to rotate. Quaternion rotation The Quaternion rotation to apply. Vector3 result When the method completes, contains the transformed Vector3 . Operators Addition(Vector3, Vector3) Adds two vectors. Declaration public static Vector3 operator +(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to add. Vector3 right The second vector to add. Returns Type Description Vector3 The sum of the two vectors. Multiply(Vector3, Single) Scales a vector by the given value. Declaration public static Vector3 operator *(Vector3 value, float scale) Parameters Type Name Description Vector3 value The vector to scale. Single scale The amount by which to scale the vector. Returns Type Description Vector3 The scaled vector. Multiply(Single, Vector3) Scales a vector by the given value. Declaration public static Vector3 operator *(float scale, Vector3 value) Parameters Type Name Description Single scale The amount by which to scale the vector. Vector3 value The vector to scale. Returns Type Description Vector3 The scaled vector. Subtraction(Vector3, Vector3) Subtracts two vectors. Declaration public static Vector3 operator -(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to subtract. Vector3 right The second vector to subtract. Returns Type Description Vector3 The difference of the two vectors."
  },
  "api/LightspaceCompositorServiceClient.CompositorServiceClient.html": {
    "href": "api/LightspaceCompositorServiceClient.CompositorServiceClient.html",
    "title": "Class CompositorServiceClient | Lightspace Compositor Documentation",
    "keywords": "Class CompositorServiceClient An RPC client wrapper for an ICompositor implementation. Used to control the real Compositor in a separate process. Inheritance Object CompositorServiceClient Implements ICompositor IDisposable Namespace : LightspaceCompositorServiceClient Assembly : LightspaceCompositorServiceClient.dll Syntax public class CompositorServiceClient : object, ICompositor Constructors CompositorServiceClient(String) Initializes a new instance of the CompositorServiceClient class. Declaration public CompositorServiceClient(string hostBinaryPath = null) Parameters Type Name Description String hostBinaryPath Path to the host binary file, will be used if a running instance is not found. Properties BufferSets Gets the available buffer sets. Declaration public BufferSet[] BufferSets { get; } Property Value Type Description BufferSet [] IsFullScreen Gets a value indicating whether the compositor renderer is in fullscreen or not. Declaration public bool IsFullScreen { get; } Property Value Type Description Boolean IsMaximized Gets a value indicating whether the compositing window is in maximized state or not. Declaration public bool IsMaximized { get; } Property Value Type Description Boolean Parameters Gets the compositor parameters. This is proxied through the separate Parameters client, since the Parameters isn't a basic struct or a POCO, and ServiceWire does not do recursive proxying of objects. That is, if we want to call methods (gets and sets) on Parameters, we need to have a separate proxy set up for that. Declaration public ICompositorParameters Parameters { get; } Property Value Type Description ICompositorParameters StereoDevice Gets the current stereo device. Declaration public StereoDevice StereoDevice { get; } Property Value Type Description StereoDevice Tracking Gets the compositor tracking interface. This is proxied through the separate Tracking client, since the Parameters isn't a basic struct or a POCO, and ServiceWire does not do recursive proxying of objects. That is, if we want to call methods (gets and sets) on Parameters, we need to have a separate proxy set up for that. Declaration public ITracking Tracking { get; } Property Value Type Description ITracking Methods CheckHostProcessIsRunning() Checks if host process is running. Declaration public static bool CheckHostProcessIsRunning() Returns Type Description Boolean True, if host process is running. False, otherwise. Dispose() Releases resources. Declaration public void Dispose() GetCurrentPose() Gets the pose from current tracking device. Declaration public TrackedHeadPose GetCurrentPose() Returns Type Description TrackedHeadPose The tracking device pose. GetGraphicsAdapterInfo() Gets graphics adapter info where compositor is rendering. Declaration public GraphicsAdapterInfo GetGraphicsAdapterInfo() Returns Type Description GraphicsAdapterInfo Graphics adapter info. RenderFinish(Int32, TrackedHeadPose) Mark the end of rendering for the given buffer set. Declaration public void RenderFinish(int id, TrackedHeadPose pose) Parameters Type Name Description Int32 id The buffer set identifier. TrackedHeadPose pose The tracking pose to mark with the rendered frame. RenderStart() Signals compositor that rendering has started and returns a buffer set with render target views to render to. Declaration public BufferSet RenderStart() Returns Type Description BufferSet A buffer set to render to. Run() Starts the compositor renderer. Declaration public void Run() Shutdown() Shuts down this instance. Declaration public void Shutdown() TryConnectToExistingHostProcess(out CompositorServiceClient) Checks and attempts to connect to host process if running and returns client instance on success. Declaration public static bool TryConnectToExistingHostProcess(out CompositorServiceClient client) Parameters Type Name Description CompositorServiceClient client The client instance if host process is available. Returns Type Description Boolean True, if connect attempt was successful. False, otherwise. WaitRenderStart() Waits for next compositor v-blank. Use this to sync renderer with compositor. Declaration public void WaitRenderStart() Implements ICompositor IDisposable See Also ICompositor"
  },
  "api/LightspaceCompositorServiceClient.CompositorTrackingClient.html": {
    "href": "api/LightspaceCompositorServiceClient.CompositorTrackingClient.html",
    "title": "Class CompositorTrackingClient | Lightspace Compositor Documentation",
    "keywords": "Class CompositorTrackingClient An RPC client wrapper for an ITracker implementation. Used to interface with tracking in a separate process launched by compositor. Inheritance Object CompositorTrackingClient Implements ITracking Namespace : LightspaceCompositorServiceClient Assembly : LightspaceCompositorServiceClient.dll Syntax public class CompositorTrackingClient : object, ITracking Constructors CompositorTrackingClient() Initializes a new instance of the CompositorTrackingClient class. Declaration public CompositorTrackingClient() Properties State Gets the current active tracking mode. Declaration public TrackingState State { get; } Property Value Type Description TrackingState Methods GetCurrentTrackingProviderInfo() Gets the detailed information about current tracking provider, e.g. loaded plugin. Declaration public TrackingProviderDescription GetCurrentTrackingProviderInfo() Returns Type Description TrackingProviderDescription The information about tracking provider. GetTrackedObjectPoses(Single) Gets all tracked object poses. Declaration public IEnumerable<TrackedObjectPose> GetTrackedObjectPoses(float predictionTimeMs) Parameters Type Name Description Single predictionTimeMs The prediction time in milliseconds. Returns Type Description IEnumerable < TrackedObjectPose > An of tracked object poses. SetTrackingPluginPath(String) Requests tracking service to load specified tracking plugin folder. Declaration public void SetTrackingPluginPath(string path) Parameters Type Name Description String path The path to tracking plugin. SetTrackingServiceProviderPath(String) Sets the tracking service provider (i.e. host) path. Declaration public void SetTrackingServiceProviderPath(string path) Parameters Type Name Description String path The path to tracking service provider. Implements ITracking See Also ICompositor"
  },
  "api/LightspaceCompositorServiceClient.html": {
    "href": "api/LightspaceCompositorServiceClient.html",
    "title": "Namespace LightspaceCompositorServiceClient | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositorServiceClient Classes CompositorServiceClient An RPC client wrapper for an ICompositor implementation. Used to control the real Compositor in a separate process. CompositorTrackingClient An RPC client wrapper for an ITracker implementation. Used to interface with tracking in a separate process launched by compositor."
  },
  "api/LightspaceCompositorServiceClientNative.CompositorServiceClientNative.html": {
    "href": "api/LightspaceCompositorServiceClientNative.CompositorServiceClientNative.html",
    "title": "Class CompositorServiceClientNative | Lightspace Compositor Documentation",
    "keywords": "Class CompositorServiceClientNative Class for communicating with a CompositorHost from a native application. Inheritance Object CompositorServiceClientNative Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Namespace : LightspaceCompositorServiceClientNative Assembly : LightspaceCompositorServiceClientNative.dll Syntax public static class CompositorServiceClientNative Methods GetBufferSet(Int32, BufferSet) Gets the buffer set indicated by the index. Declaration public static int GetBufferSet(int index, BufferSet bufferSet) Parameters Type Name Description Int32 index Index of the buffer set to return. BufferSet bufferSet The specified buffer, or an empty structure in case of an error. Returns Type Description Int32 0 on success, non-zero on failure. Consumers should call GetLastError if value was not 0. GetBufferSetCount() Gets the number of available buffer sets. Declaration public static int GetBufferSetCount() Returns Type Description Int32 The number of available buffer sets, or -1 in the case of an error. Consumers should call GetLastError if value was less than 0. GetCalibratedProjectionMatrix(Eye, Matrix) Attempts to get calibrated projection matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. Declaration public static int GetCalibratedProjectionMatrix(Eye eye, Matrix matrix) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Matrix matrix The calibrated view matrix or default projection matrix. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. GetCalibratedViewMatrix(Eye, Matrix) Attempts to get the calibrated view matrix loaded from HMD calibration data to be used with DX graphics api in LH coordinate system. If calibration is not available this will default to standard DX matrix based on device default parameters. This tells where the camera rendering position should be set. Declaration public static int GetCalibratedViewMatrix(Eye eye, Matrix matrix) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. Matrix matrix The calibrated view matrix or default projection matrix. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. GetCalibrationIntrinsics(Eye, CalibrationIntrinsics) Attempts to get the calibration intrinsics for given eye when data is available. Declaration public static int GetCalibrationIntrinsics(Eye eye, CalibrationIntrinsics intrinsics) Parameters Type Name Description Eye eye Which eye the data is requested for, left or right. CalibrationIntrinsics intrinsics The internal camera calibration intrinsics for given eye, defaults if unavailable. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. GetCalibrationStatus(CalibrationInfo) Gets the current calibration status, i.e. availability and validation info. Declaration public static int GetCalibrationStatus(CalibrationInfo status) Parameters Type Name Description CalibrationInfo status The calibration info on success. Defaults otherwise. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. GetCurrentPose(TrackedHeadPose) Wraps the GetCurrentPose call. Declaration public static int GetCurrentPose(TrackedHeadPose pose) Parameters Type Name Description TrackedHeadPose pose Reference to a TrackedHeadPose structure to store the data into. Returns Type Description Int32 0 on success, non-zero on failure. Consumers should call GetLastError if value was not 0. GetCurrentTrackerInfo(NativeTrackingProviderDescription) Wraps the GetCurrentTrackerInfo call. Declaration public static int GetCurrentTrackerInfo(NativeTrackingProviderDescription nativeTrackerInfo) Parameters Type Name Description NativeTrackingProviderDescription nativeTrackerInfo Reference to a TrackingProviderDescription structure to store the data into. Returns Type Description Int32 0 on success, non-zero on failure. Consumers should call GetLastError if value was not 0. GetGraphicsAdapterInfo(NativeGraphicsAdapterInfo) Wraps the GetGraphicsAdapterInfo call. Declaration public static int GetGraphicsAdapterInfo(NativeGraphicsAdapterInfo nativeGraphicsAdapterInfo) Parameters Type Name Description NativeGraphicsAdapterInfo nativeGraphicsAdapterInfo Reference to see NativeGraphicsAdapterInfo structure to store the data into. Returns Type Description Int32 0 on success, non-zero on failure. Consumers should call GetLastError if value was not 0. GetLastError() Retrieves the last logged error string. Declaration public static IntPtr GetLastError() Returns Type Description IntPtr A pointer to the error string. GetPixelOffsets(Eye, Vector2) Gets the pixel offsets for the currently set IPD. These values represent by how many horizontal/vertical pixels the image needs to be shifted for the specified IPD. This adjustment is required for headsets that do not have mechanical IPD adjustment, so the image needs to be \"moved\" digitally. Declaration public static int GetPixelOffsets(Eye eyeSide, Vector2 offset) Parameters Type Name Description Eye eyeSide Which eye the data is requested for, left or right. Vector2 offset Returned offset values. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. GetPupilDistance() Gets the pupil distance in meters. Declaration public static float GetPupilDistance() Returns Type Description Single The pupil distance in meters if the call was successful, or negative value in case of error. Consumers should call GetLastError if value was not 0. GetStereoDevice(NativeStereoDevice) Gets the stereo device details. Declaration public static int GetStereoDevice(NativeStereoDevice stereoDevice) Parameters Type Name Description NativeStereoDevice stereoDevice The returned stereo device. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. Initialize(IntPtr) Initializes the dependencies: host application, named pipe proxy channels, etc. Declaration public static int Initialize(IntPtr compositorHostPath) Parameters Type Name Description IntPtr compositorHostPath Path to the host application's exe (optional). Returns Type Description Int32 0 on success, an error code otherwise. Consumers should call GetLastError if value was not 0. IsFullScreen() Wraps the IsFullScreen call. Declaration public static bool IsFullScreen() Returns Type Description Boolean A bool indicating whether the host app is currently running in full screen. IsMaximized() Wraps the IsMaximized call. Declaration public static bool IsMaximized() Returns Type Description Boolean A bool indicating whether the host app is currently running in maximized window mode. RenderFinish(Int32, TrackedHeadPose) Wraps the RenderFinish call. Declaration public static int RenderFinish(int bufferSetId, TrackedHeadPose pose) Parameters Type Name Description Int32 bufferSetId Id of the buffer set used for the render. TrackedHeadPose pose The pose that was used with rendering. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. RenderStart(BufferSet) Wraps the RenderStart call. Declaration public static int RenderStart(BufferSet bufferSet) Parameters Type Name Description BufferSet bufferSet A BufferSet if the call was successful, or an unpopulated struct in case of error. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. Run() Wraps the Run call. Declaration public static int Run() Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. SetInvertDepth(Boolean) Sets whether the depth should be inverted or not. Declaration public static int SetInvertDepth(bool invertDepth) Parameters Type Name Description Boolean invertDepth Invert depth, true or false. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. SetPlanes(Single, Single) Wraps the SetPlanes call. Declaration public static int SetPlanes(float nearPlane, float farPlane) Parameters Type Name Description Single nearPlane The near plane distance. Single farPlane The far plane distance. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. SetPupilDistance(Single) Sets the pupil distance in meters. Declaration public static int SetPupilDistance(float pupilDistanceMeters) Parameters Type Name Description Single pupilDistanceMeters The pupil distance in meters. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. SetTrackingPluginPath(IntPtr) Wraps the SetTrackingPluginPath call. Declaration public static int SetTrackingPluginPath(IntPtr pluginPath) Parameters Type Name Description IntPtr pluginPath The unmanaged string path pointer to tracking plugin. Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. SetTrackingServiceProviderPath(IntPtr) Wraps the SetTrackingServiceProviderPath call. Declaration public static int SetTrackingServiceProviderPath(IntPtr providerPath) Parameters Type Name Description IntPtr providerPath The unmanaged string path pointer to tracking service provider (i.e. host). Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. Shutdown() Wraps the Shutdown call. Declaration public static int Shutdown() Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0. TryInitialize() Attempts to initialize dependencies if host process is already running: named pipe proxy channels, etc. Declaration public static bool TryInitialize() Returns Type Description Boolean True on success, false otherwise. Consumers should call GetLastError if result is false. WaitRenderStart() Wraps the WaitRenderStart call. Declaration public static int WaitRenderStart() Returns Type Description Int32 0 on success, non-zero value otherwise. Consumers should call GetLastError if value was not 0."
  },
  "api/LightspaceCompositorServiceClientNative.html": {
    "href": "api/LightspaceCompositorServiceClientNative.html",
    "title": "Namespace LightspaceCompositorServiceClientNative | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositorServiceClientNative Classes CompositorServiceClientNative Class for communicating with a CompositorHost from a native application."
  },
  "api/LightspaceCompositorServiceClientNative.NativeContracts.html": {
    "href": "api/LightspaceCompositorServiceClientNative.NativeContracts.html",
    "title": "Namespace LightspaceCompositorServiceClientNative.NativeContracts | Lightspace Compositor Documentation",
    "keywords": "Namespace LightspaceCompositorServiceClientNative.NativeContracts Structs NativeGraphicsAdapterInfo A structure representing a graphics adapter information, similar to GraphicsAdapterInfo . NativeStereoDevice A structure representing a stereo device, similar to StereoDevice , with some fields removed (e.g. strings) to make it easier to pass through to the native code. NativeTrackingProviderDescription A structure representing a describing tracking pose provider description, similar to TrackingProviderDescription to use with native code."
  },
  "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeGraphicsAdapterInfo.html": {
    "href": "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeGraphicsAdapterInfo.html",
    "title": "Struct NativeGraphicsAdapterInfo | Lightspace Compositor Documentation",
    "keywords": "Struct NativeGraphicsAdapterInfo A structure representing a graphics adapter information, similar to GraphicsAdapterInfo . Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : LightspaceCompositorServiceClientNative.NativeContracts Assembly : LightspaceCompositorServiceClientNative.dll Syntax public struct NativeGraphicsAdapterInfo Fields AdapterDescription A pointer to graphics adapter description string. Declaration public IntPtr AdapterDescription Field Value Type Description IntPtr AdapterDeviceId Graphics adapter device id. Declaration public int AdapterDeviceId Field Value Type Description Int32 AdapterLuid Graphics adapter luid where compositor is rendering. Declaration public long AdapterLuid Field Value Type Description Int64 AdapterOrderId Graphics adapter orderId in graphics adapter list. Declaration public int AdapterOrderId Field Value Type Description Int32 OutputDeviceName A pointer to graphics adapters output device name string. Declaration public IntPtr OutputDeviceName Field Value Type Description IntPtr"
  },
  "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeStereoDevice.html": {
    "href": "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeStereoDevice.html",
    "title": "Struct NativeStereoDevice | Lightspace Compositor Documentation",
    "keywords": "Struct NativeStereoDevice A structure representing a stereo device, similar to StereoDevice , with some fields removed (e.g. strings) to make it easier to pass through to the native code. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : LightspaceCompositorServiceClientNative.NativeContracts Assembly : LightspaceCompositorServiceClientNative.dll Syntax public struct NativeStereoDevice Fields HorizontalFovDeg Gets or sets the horizontal field of view in degrees. Declaration public float HorizontalFovDeg Field Value Type Description Single Model Gets or sets the device model. Declaration public StereoDeviceModel Model Field Value Type Description StereoDeviceModel VerticalFovDeg Gets or sets the vertical field of view in degrees. Declaration public float VerticalFovDeg Field Value Type Description Single"
  },
  "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeTrackingProviderDescription.html": {
    "href": "api/LightspaceCompositorServiceClientNative.NativeContracts.NativeTrackingProviderDescription.html",
    "title": "Struct NativeTrackingProviderDescription | Lightspace Compositor Documentation",
    "keywords": "Struct NativeTrackingProviderDescription A structure representing a describing tracking pose provider description, similar to TrackingProviderDescription to use with native code. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Namespace : LightspaceCompositorServiceClientNative.NativeContracts Assembly : LightspaceCompositorServiceClientNative.dll Syntax public struct NativeTrackingProviderDescription Fields Manufacturer A pointer to manufacturer of tracking pose provider plugin manufacturer string. Declaration public IntPtr Manufacturer Field Value Type Description IntPtr Name A pointer to name of tracking pose provider plugin string. Declaration public IntPtr Name Field Value Type Description IntPtr PredictionModel A pointer to used prediction model description string. Declaration public IntPtr PredictionModel Field Value Type Description IntPtr"
  },
  "articles/api-guide.html": {
    "href": "articles/api-guide.html",
    "title": "API Guide | Lightspace Compositor Documentation",
    "keywords": "API Guide The section contains Compositor API integration guidelines. Quick API Setup Guide Import LightspaceCompositor and required dlls to your renderer project. Initialize Compositor . using LightspaceCompositor // ... var compositor = new Compositor(); compositor.Run(); This step is required to show compositor window and start internal renderer. Use compositor.GetGraphicsAdapterInfo(); to set up external D3D11 device used for rendering with correct adapter. This will also initialize internal buffer scheduler and create texture descriptions for the render device to render to. (Optional) Set up tracking. If tracking is required, a path to Lightspace tracking service and Lightspace tracking plugin must be set via Compositor.Tracking interface prior running the compositor, e.g. var compositor = new Compositor(); compositor.Tracking.SetTrackingServiceProviderPath(\"..\\\\..\\\\..\\\\external\\\\TrackingServiceHost\\\\LightspaceTrackingServiceHost.exe\"); compositor.Tracking.SetTrackingPluginPath(\"..\\\\..\\\\..\\\\external\\\\TrackingServiceHost\\\\TrackingPlugins\\\\RealSensePlugin\"); compositor.Run(); In addition, Compositor.Tracking.GetTrackedObjectPoses method can be used to track objects if loaded plugin supports it. Start render loop. Next acquire pose with GetCurrentPose to use for rendering. Then use RenderStart and RenderFinish to wrap render part in the render loop. It is recommended to use WaitRenderStart before RenderStart to sync renderer with the compositor. compositor.WaitRenderStart(); var pose = compositor.GetCurrentPose(); var bufferSet = compositor.RenderStart(); // ... // Do rendering by accessing textures from the buffer set texture descriptions e.g. RTVs, SRVs, etc. // ... compositor.RenderFinish(bufferSet.Id, pose); Client-Host Communication Mode The compositor can be started in separate process and communicated with using client libraries. Using C# Client To set up C# client use project contents from compositorClient in your project. API usage is similar to similar to Quick API Setup Guide . Only difference is to initialize compositor with client API using either. var compositor = new CompositorServiceClient(\"..\\\\pathToHost\\\\LightspaceCompositorHost.exe\"); or, if process is managed separately: if (CompositorServiceClient.TryConnectToExistingHostProcess(out CompositorServiceClient client)) { ... } Using C++ Client To set up C++ client use project contents from compositorNativeClient : LightspaceCompositorServiceClientNative.h needs to be added as a header files. The file might require additional editing LightspaceCompositorServiceClientNative.dll needs to be copied to output dir. LightspaceCompositorServiceClientNative.lib need to be added as additional libraries ( addlibs might be necessary as well). Add the following additional dependencies: kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib bcrypt.lib LightspaceCompositorServiceClientNative.lib bootstrapperdll.lib Runtime.lib System.Private.TypeLoader.Native.lib NB! The setup is tested with Visual Studio 2022 platform tool set v143 Code samples LightspaceCompositorServiceClientNative.h sample #pragma once enum LightspaceCompositorContracts_LightspaceCompositorContracts_Eye { Left = 0, Right = 1, }; enum LightspaceCompositorContracts_LightspaceCompositorContracts_TextureFormat { R8G8B8A8_UN = 0, R32G8X24_T = 1, }; struct LightspaceCompositorContracts_LightspaceCompositorContracts_TextureDescription { /* 0x0000 */ void* Handle; /* 0x0008 */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_Eye Eye; /* 0x000c */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_TextureFormat Format; /* 0x0010 */ int Width; /* 0x0014 */ int Height; }; /* size: 0x0018 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_BufferSet { /* 0x0000 */ int Id; /* 0x0004 */ long Padding_0; /* 0x0008 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_TextureDescription ColorL; /* 0x0020 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_TextureDescription ColorR; /* 0x0038 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_TextureDescription DepthL; /* 0x0050 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_TextureDescription DepthR; }; /* size: 0x0068 */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationState { Unavailable = 0, Loading = 1, Faulted = 2, Loaded = 3, }; struct LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationInfo { /* 0x0000 */ __int64 Timestamp; /* 0x0008 */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationState State; /* 0x000c */ bool IsValid; /* 0x000d */ char __PADDING__[3]; }; /* size: 0x0010 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationIntrinsics { /* 0x0000 */ float FX; /* 0x0004 */ float FY; /* 0x0008 */ float CX; /* 0x000c */ float CY; /* 0x0010 */ float RX; /* 0x0014 */ float RY; /* 0x0018 */ float RZ; /* 0x001c */ float TX; /* 0x0020 */ float TY; /* 0x0024 */ float TZ; }; /* size: 0x0028 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Matrix { union { struct { /* 0x0000 */ float M11; /* 0x0004 */ float M12; /* 0x0008 */ float M13; /* 0x000c */ float M14; /* 0x0010 */ float M21; /* 0x0014 */ float M22; /* 0x0018 */ float M23; /* 0x001c */ float M24; /* 0x0020 */ float M31; /* 0x0024 */ float M32; /* 0x0028 */ float M33; /* 0x002c */ float M34; /* 0x0030 */ float M41; /* 0x0034 */ float M42; /* 0x0038 */ float M43; /* 0x003c */ float M44; }; /* size: 0x0040 */ }; }; /* size: 0x0040 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Quaternion { union { struct { /* 0x0000 */ float W; /* 0x0004 */ float X; /* 0x0008 */ float Y; /* 0x000c */ float Z; }; /* size: 0x0010 */ }; /* size: 0x0010 */ }; /* size: 0x0010 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Vector3 { /* 0x0000 */ float X; /* 0x0004 */ float Y; /* 0x0008 */ float Z; }; /* size: 0x000c */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_TrackedHeadPose { /* 0x0000 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Vector3 Translation; /* 0x000c */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Quaternion Rotation; /* 0x001c */ long Padding_0; /* 0x0020 */ __int64 Timestamp; }; /* size: 0x0028 */ struct LightspaceCompositorContracts_LightspaceCompositorContracts_Vector2 { /* 0x0000 */ float X; /* 0x0004 */ float Y; }; /* size: 0x0008 */ struct LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeGraphicsAdapterInfo { /* 0x0000 */ void* AdapterDescription; /* 0x0008 */ int AdapterDeviceId; /* 0x000c */ long Padding_0; /* 0x0010 */ __int64 AdapterLuid; /* 0x0018 */ int AdapterOrderId; /* 0x001c */ long Padding_1; /* 0x0020 */ void* OutputDeviceName; }; /* size: 0x0028 */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_StereoDeviceModel { Other = 0, Virtual = 1, Ig1000Demo = 2, Ig1000 = 3, Ig2000Lab = 4, }; struct LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeStereoDevice { /* 0x0000 */ enum LightspaceCompositorContracts_LightspaceCompositorContracts_StereoDeviceModel Model; /* 0x0004 */ float HorizontalFovDeg; /* 0x0008 */ float VerticalFovDeg; }; /* size: 0x000c */ struct LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeTrackingProviderDescription { /* 0x0000 */ void* Name; /* 0x0008 */ void* Manufacturer; /* 0x0010 */ void* PredictionModel; }; /* size: 0x0018 */ extern \"C\" int __stdcall initialize(void* compositorHostPath); extern \"C\" bool __stdcall tryInitialize(); extern \"C\" bool __stdcall isFullScreen(); extern \"C\" bool __stdcall isMaximized(); extern \"C\" int __stdcall getBufferSet(int index, LightspaceCompositorContracts_LightspaceCompositorContracts_BufferSet * bufferSet); extern \"C\" int __stdcall getBufferSetCount(); extern \"C\" int __stdcall getCurrentPose(LightspaceCompositorContracts_LightspaceCompositorContracts_TrackedHeadPose * pose); extern \"C\" int __stdcall getGraphicsAdapterInfo(LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeGraphicsAdapterInfo * nativeGraphicsAdapterInfo); extern \"C\" int __stdcall setTrackingServiceProviderPath(void* providerPath); extern \"C\" int __stdcall setTrackingPluginPath(void* pluginPath); extern \"C\" int __stdcall getCurrentTrackerInfo(LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeTrackingProviderDescription * nativeTrackerInfo); extern \"C\" int __stdcall renderStart(LightspaceCompositorContracts_LightspaceCompositorContracts_BufferSet * bufferSet); extern \"C\" int __stdcall renderFinish(int bufferSetId, LightspaceCompositorContracts_LightspaceCompositorContracts_TrackedHeadPose pose); extern \"C\" int __stdcall run(); extern \"C\" int __stdcall setPlanes(float nearPlane, float farPlane); extern \"C\" int __stdcall shutdown(); extern \"C\" int __stdcall waitRenderStart(); extern \"C\" int __stdcall getStereoDevice(LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeStereoDevice * stereoDevice); extern \"C\" float __stdcall getPupilDistance(); extern \"C\" int __stdcall setInvertDepth(bool invertDepth); extern \"C\" int __stdcall setPupilDistance(float pupilDistanceMeters); extern \"C\" int __stdcall getPixelOffsets(LightspaceCompositorContracts_LightspaceCompositorContracts_Eye eyeSide, LightspaceCompositorContracts_LightspaceCompositorContracts_Vector2 * offset); extern \"C\" int __stdcall getCalibrationStatus(LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationInfo * status); extern \"C\" int __stdcall getCalibratedProjectionMatrix(LightspaceCompositorContracts_LightspaceCompositorContracts_Eye eye, LightspaceCompositorContracts_LightspaceCompositorContracts_Matrix * matrix); extern \"C\" int __stdcall getCalibratedViewMatrix(LightspaceCompositorContracts_LightspaceCompositorContracts_Eye eye, LightspaceCompositorContracts_LightspaceCompositorContracts_Matrix * matrix); extern \"C\" int __stdcall getCalibrationIntrinsics(LightspaceCompositorContracts_LightspaceCompositorContracts_Eye eye, LightspaceCompositorContracts_LightspaceCompositorContracts_CalibrationIntrinsics * intrinsics); extern \"C\" void* __stdcall getLastError(); main.cpp sample // NativeClientTester.cpp - Used to test native client calls to compositor host in Release x64 config #define _ITERATOR_DEBUG_LEVEL 0 #include <conio.h> #include <iostream> #include \"LightspaceCompositorServiceClientNative.h\" int main() { std::cout << \"Initializing compositor native call tests...\\n\"; // todo: add and parse path as command line argument for easier startup testing auto* path = const_cast<char*>(R\"(..\\..\\LightspaceCompositor-latest\\compositorHost\\net472\\LightspaceCompositorHost.exe)\"); int res = initialize(path); if (res != 0) { std::cout << \"Failed to initialize compositor communication\"; return res; } res = run(); if (res != 0) { std::cout << \"Failed to run compositor\"; return res; } LightspaceCompositorServiceClientNative_LightspaceCompositorServiceClientNative_NativeContracts_NativeGraphicsAdapterInfo adapterInfo; res = getGraphicsAdapterInfo(&adapterInfo); if (res != 0) { std::cout << \"Failed to get graphics adapter info\"; return res; } auto* deviceName = static_cast<char*>(adapterInfo.OutputDeviceName); std::cout << \"Output device name: \" << deviceName << std::endl; res = setPlanes(0, 100); if (res != 0) { std::cout << \"Failed to set plane distances\"; return res; } res = setPupilDistance(0.063f); float pd = getPupilDistance(); std::cout << \"PD set to: \" << pd << std::endl; if (res != 0 || pd < 0) { std::cout << \"Failed to set pupil distance\"; return res; } while (true) { int c = _kbhit(); if (c != 0) { std::cout << \"Exiting...\"; break; } waitRenderStart(); if (res != 0) { std::cout << \"Wait render start failed\"; break; } LightspaceCompositorContracts_LightspaceCompositorContracts_TrackedHeadPose pose; res = getCurrentPose(&pose); if (res != 0) { std::cout << \"Pose acquisition failed\"; break; } LightspaceCompositorContracts_LightspaceCompositorContracts_BufferSet set; res = renderStart(&set); if (res != 0) { std::cout << \"Buffer set acquisition failed\"; break; } std::cout << \"set id: \" << set.Id << \" tex width px: \" << set.ColorL.Width << \" tex height px: \" << set.ColorL.Height << std::endl; // Finish rendering. res = renderFinish(set.Id, pose); if (res != 0) { std::cout << \"Render finish failed\"; break; } } res = shutdown(); if (res != 0) { std::cout << \"Shutdown failed\"; } return res; }"
  },
  "articles/device-setup.html": {
    "href": "articles/device-setup.html",
    "title": "IG1000 first time setup | Lightspace Compositor Documentation",
    "keywords": "IG1000 first time setup Connect the IG1000 device to Windows 10 PC. Open Settings > System > Display and make sure that: Scaling is set to 100% Resolution is set to 1708x1920 Display orientation is in Portrait mode Multiple displays are Extended (Optional) set desktop background to black color"
  },
  "articles/samples.html": {
    "href": "articles/samples.html",
    "title": "Sample Projects | Lightspace Compositor Documentation",
    "keywords": "Sample Projects Samples are located under samples folder. MiniCube Sample The sample is based on MiniCube sample found on GitHub How To Use Launch application MiniCube.exe in default mode or client-host communication mode using host path as startup argument, e.g. MiniCube.exe path-to-host-exe/LightspaceCompositorHost.exe . On small external renderer window: Use up and down arrow keys to change cube distance. Use left and right arrow keys to change user IPD. Code sample Here is a code sample used with MiniCube application using SharpDX as external renderer core. // ----------------------------------------------------------------------- // <copyright file=\"Program.cs\" company=\"Lightspace Technologies\"> // Copyright (c) Lightspace Technologies. All rights reserved. // </copyright> // ----------------------------------------------------------------------- namespace MiniCube { using System; using System.Diagnostics; using System.Drawing; using System.IO; using System.Linq; using System.Reflection; using System.Windows.Forms; using LightspaceCompositor; using LightspaceCompositorContracts; using LightspaceCompositorServiceClient; using SharpDX; using SharpDX.D3DCompiler; using SharpDX.Direct3D; using SharpDX.Direct3D11; using SharpDX.DXGI; using SharpDX.Windows; using Color = SharpDX.Color; using Device = SharpDX.Direct3D11.Device; using Matrix = SharpDX.Matrix; using Vector3 = SharpDX.Vector3; /// <summary> /// A compositor integration sample based on MiniCube project found here /// https://github.com/sharpdx/SharpDX-Samples/tree/master/Desktop/Direct3D11/MiniCube /// </summary> public class Program { /// <summary> /// The main entry point of the program. Initializes render form and compositor /// </summary> /// <param name=\"cmd\">The cmd line args.</param> public static void Main(string[] cmd) { var form = new RenderForm(\"Lightspace MiniCube Sample\"); var hostPath = cmd.ToList().FirstOrDefault(); var useHost = !string.IsNullOrEmpty(hostPath); var compositor = InitializeCompositor(useHost, hostPath); var distance = 1f; var depthDsvDescription = new DepthStencilViewDescription() { Format = Format.D32_Float_S8X24_UInt, Texture2D = new DepthStencilViewDescription.Texture2DResource() { MipSlice = 0 }, Dimension = DepthStencilViewDimension.Texture2D, Flags = DepthStencilViewFlags.None }; // SwapChain description var desc = new SwapChainDescription() { BufferCount = 1, ModeDescription = new ModeDescription( form.ClientSize.Width, form.ClientSize.Height, new Rational(60, 1), Format.R8G8B8A8_UNorm), IsWindowed = true, OutputHandle = form.Handle, SampleDescription = new SampleDescription(1, 0), SwapEffect = SwapEffect.Discard, Usage = Usage.RenderTargetOutput }; Device device; SwapChain swapChain; // Create Device and SwapChain using (var factory2 = new Factory2()) { var adapterInfo = compositor.GetGraphicsAdapterInfo(); using (var adapter = factory2.Adapters.First(x => x.Description.Luid == adapterInfo.AdapterLuid)) using (var output = adapter.Outputs.First(x => x.Description.DeviceName == adapterInfo.OutputDeviceName)) { Device.CreateWithSwapChain(adapter, DeviceCreationFlags.None, desc, out device, out swapChain); } } var immediateContext = device.ImmediateContext; var deferredContexts = new[] { new DeviceContext(device), new DeviceContext(device) }; var commandLists = new CommandList[2]; // Ignore all windows events var factory = swapChain.GetParent<Factory>(); factory.MakeWindowAssociation(form.Handle, WindowAssociationFlags.IgnoreAll); // Compile Vertex and Pixel shaders var assembly = Assembly.GetExecutingAssembly(); var names = assembly.GetManifestResourceNames(); var resourceName = names.First(x => x.Contains(\"MiniCube.MiniCube.fx\")); // Read embedded shader resource and compile shaders string result = string.Empty; using (var stream = assembly.GetManifestResourceStream(resourceName)) using (var reader = new StreamReader(stream)) { result = reader.ReadToEnd(); } var vertexShaderByteCode = ShaderBytecode.Compile(result, \"VS\", \"vs_4_0\"); var vertexShader = new VertexShader(device, vertexShaderByteCode); var pixelShaderByteCode = ShaderBytecode.Compile(result, \"PS\", \"ps_4_0\"); var pixelShader = new PixelShader(device, pixelShaderByteCode); var signature = ShaderSignature.GetInputSignature(vertexShaderByteCode); // Layout from vertex shader input signature var layout = new InputLayout(device, signature, new[] { new InputElement(\"POSITION\", 0, Format.R32G32B32A32_Float, 0, 0), new InputElement(\"COLOR\", 0, Format.R32G32B32A32_Float, 16, 0), }); // Instantiate vertex buffer from vertex data - represents 0.2 x 0.2 cube with colored surfaces var vertices = SharpDX.Direct3D11.Buffer.Create(device, BindFlags.VertexBuffer, new[] { new Vector4(-0.1f, -0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), // Front new Vector4(-0.1f, 0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4( 0.1f, 0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(-0.1f, -0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4( 0.1f, 0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4( 0.1f, -0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 0.0f, 1.0f), new Vector4(-0.1f, -0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), // BACK new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f, -0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4( 0.1f, -0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f, 0.1f, -0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), // Top new Vector4(-0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f, 0.1f, -0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), new Vector4( 0.1f, 0.1f, -0.1f, 1f), new Vector4(0.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f,- 0.1f, -0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), // Bottom new Vector4( 0.1f,- 0.1f, 0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f,- 0.1f, 0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f,- 0.1f, -0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), new Vector4( 0.1f,- 0.1f, -0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), new Vector4( 0.1f,- 0.1f, 0.1f, 1f), new Vector4(1.0f, 1.0f, 0.0f, 1.0f), new Vector4(-0.1f, -0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), // Left new Vector4(-0.1f, -0.1f, 0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f, 0.1f, 0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f, -0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f, 0.1f, 0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), new Vector4(-0.1f, 0.1f, -0.1f, 1f), new Vector4(1.0f, 0.0f, 1.0f, 1.0f), new Vector4( 0.1f, -0.1f, -0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), // Right new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), new Vector4( 0.1f, -0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), new Vector4( 0.1f, -0.1f, -0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), new Vector4( 0.1f, 0.1f, -0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), new Vector4( 0.1f, 0.1f, 0.1f, 1f), new Vector4(0.0f, 1.0f, 1.0f, 1.0f), }); // Create Constant Buffer var constantBuffer = new SharpDX.Direct3D11.Buffer(device, Utilities.SizeOf<Matrix>(), ResourceUsage.Default, BindFlags.ConstantBuffer, CpuAccessFlags.None, ResourceOptionFlags.None, 0); // Prepare All the stages immediateContext.InputAssembler.InputLayout = layout; immediateContext.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList; immediateContext.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(vertices, Utilities.SizeOf<Vector4>() * 2, 0)); immediateContext.VertexShader.SetConstantBuffer(0, constantBuffer); immediateContext.VertexShader.Set(vertexShader); immediateContext.PixelShader.Set(pixelShader); foreach (var ctx in deferredContexts) { ctx.InputAssembler.InputLayout = layout; ctx.InputAssembler.PrimitiveTopology = PrimitiveTopology.TriangleList; ctx.InputAssembler.SetVertexBuffers(0, new VertexBufferBinding(vertices, Utilities.SizeOf<Vector4>() * 2, 0)); ctx.VertexShader.SetConstantBuffer(0, constantBuffer); ctx.VertexShader.Set(vertexShader); } deferredContexts[0].PixelShader.Set(pixelShader); deferredContexts[1].PixelShader.Set(pixelShader); // Use clock var clock = new Stopwatch(); clock.Start(); // Declare texture for rendering bool userResized = true; bool parametersChanged = true; Texture2D backBuffer = null; RenderTargetView renderView = null; Texture2D depthBuffer = null; DepthStencilView depthView = null; // Setup handler on resize form form.UserResized += (sender, args) => userResized = true; var render = true; // Setup key handler void KeyHandler(Keys key) { switch (key) { case Keys.Escape: form.Close(); break; case Keys.Up: distance += 0.05f; break; case Keys.S: render = !render; break; case Keys.Down: distance -= 0.05f; break; case Keys.Right: compositor.Parameters.InterPupillaryDistanceMeters += 0.0005f; break; case Keys.Left: compositor.Parameters.InterPupillaryDistanceMeters -= 0.0005f; break; } parametersChanged = true; } form.KeyUp += (sender, args) => KeyHandler(args.KeyCode); // Main render loop RenderLoop.Run(form, () => { var time = clock.ElapsedMilliseconds / 1000f; if (parametersChanged) { form.Text = $\"Lightspace MiniCube Sample :: IPD: {compositor.Parameters.InterPupillaryDistanceMeters:F4}m, Distance: {distance:F2}m\"; parametersChanged = false; } if (!render) { return; } // Synchronize with the compositor. compositor.WaitRenderStart(); var pose = compositor.GetCurrentPose(); var bufferSet = compositor.RenderStart(); if (userResized) { // Dispose all previous allocated resources Utilities.Dispose(ref backBuffer); Utilities.Dispose(ref renderView); Utilities.Dispose(ref depthBuffer); Utilities.Dispose(ref depthView); // Resize the backbuffer swapChain.ResizeBuffers(desc.BufferCount, form.ClientSize.Width, form.ClientSize.Height, Format.Unknown, SwapChainFlags.None); // Get the backbuffer from the swapchain and create renderview backBuffer = SharpDX.Direct3D11.Resource.FromSwapChain<Texture2D>(swapChain, 0); renderView = new RenderTargetView(device, backBuffer); depthBuffer = new Texture2D(device, new Texture2DDescription() { Format = Format.R32G8X24_Typeless, ArraySize = 1, MipLevels = 1, Width = form.ClientSize.Width, Height = form.ClientSize.Height, SampleDescription = new SampleDescription(1, 0), Usage = ResourceUsage.Default, BindFlags = BindFlags.DepthStencil | BindFlags.ShaderResource, CpuAccessFlags = CpuAccessFlags.None, OptionFlags = ResourceOptionFlags.Shared }); depthView = new DepthStencilView(device, depthBuffer, new DepthStencilViewDescription() { Format = Format.D32_Float_S8X24_UInt, Dimension = DepthStencilViewDimension.Texture2D, Flags = DepthStencilViewFlags.None }); // Setup targets and viewport for rendering immediateContext.Rasterizer.SetViewport(new Viewport( 0, 0, form.ClientSize.Width, form.ClientSize.Height, 0.0f, 1.0f)); immediateContext.OutputMerger.SetTargets(depthView, renderView); form.ClientSize = new Size(bufferSet.ColorL.Width, bufferSet.ColorL.Height); // We are done resizing userResized = false; } // Render center camera on immediate context used for external renderer window var vFovRad = compositor.StereoDevice.VerticalFovDeg * (float)Math.PI / 180; var distanceOffset = Matrix.LookAtLH(new Vector3(0, 0, -distance), new Vector3(0, 0, 0), Vector3.UnitY); var view = distanceOffset; var near = compositor.Parameters.NearPlaneMeters; var far = compositor.Parameters.FarPlaneMeters; var proj = Matrix.PerspectiveFovLH(vFovRad, form.ClientSize.Width / (float)form.ClientSize.Height, near, far); var viewProj = Matrix.Multiply(view, proj); var timeRot = Matrix.RotationX(time) * Matrix.RotationY(time * 0.2f) * Matrix.RotationZ(time * 0.7f); var worldViewProj = timeRot * viewProj; worldViewProj.Transpose(); immediateContext.ClearDepthStencilView(depthView, DepthStencilClearFlags.Depth, 1.0f, 0); immediateContext.ClearRenderTargetView(renderView, Color.Black); immediateContext.UpdateSubresource(ref worldViewProj, constantBuffer); immediateContext.Draw(36, 0); // Render each eye using deferred context to send to compositor. for (var eye = 0; eye < 2; eye++) { var eyeColorTex = eye == 0 ? bufferSet.ColorL : bufferSet.ColorR; var eyeDepthTex = eye == 0 ? bufferSet.DepthL : bufferSet.DepthR; using (var sharedColorTex = device.OpenSharedResource<Texture2D>(eyeColorTex.Handle)) using (var sharedDepthTex = device.OpenSharedResource<Texture2D>(eyeDepthTex.Handle)) using (var sharedColorTexRtv = new RenderTargetView(device, sharedColorTex)) using (var sharedTexDsv = new DepthStencilView(device, sharedDepthTex, depthDsvDescription)) { var vp = new Viewport(0, 0, eyeColorTex.Width, eyeColorTex.Height); var calibratedView = compositor.Parameters.GetCalibratedViewMatrix((Eye)eye); var calibratedProjection = compositor.Parameters.GetCalibratedProjectionMatrix((Eye)eye); view = Matrix.Multiply(distanceOffset, ToSharpDxMatrix(calibratedView)); proj = ToSharpDxMatrix(calibratedProjection); viewProj = Matrix.Multiply(view, proj); worldViewProj = timeRot * viewProj; worldViewProj.Transpose(); deferredContexts[eye].Rasterizer.SetViewport(vp); deferredContexts[eye].OutputMerger.SetTargets(sharedTexDsv, sharedColorTexRtv); deferredContexts[eye].ClearRenderTargetView(sharedColorTexRtv, Color.Black); deferredContexts[eye].ClearDepthStencilView(sharedTexDsv, DepthStencilClearFlags.Depth, 1.0f, 0); deferredContexts[eye].UpdateSubresource(ref worldViewProj, constantBuffer); deferredContexts[eye].Draw(36, 0); commandLists[eye]?.Dispose(); commandLists[eye] = deferredContexts[eye].FinishCommandList(true); } } immediateContext.ExecuteCommandList(commandLists[0], true); immediateContext.ExecuteCommandList(commandLists[1], true); // Present and tell compositor the rendering to buffer sets are finished. compositor.RenderFinish(bufferSet.Id, pose); swapChain.Present(0, PresentFlags.None); }); // Release all resources compositor.Shutdown(); commandLists[0].Dispose(); commandLists[1].Dispose(); deferredContexts[0].Dispose(); deferredContexts[1].Dispose(); signature.Dispose(); vertexShaderByteCode.Dispose(); vertexShader.Dispose(); pixelShaderByteCode.Dispose(); pixelShader.Dispose(); vertices.Dispose(); layout.Dispose(); constantBuffer.Dispose(); depthBuffer.Dispose(); depthView.Dispose(); renderView.Dispose(); backBuffer.Dispose(); immediateContext.ClearState(); immediateContext.Flush(); device.Dispose(); immediateContext.Dispose(); swapChain.Dispose(); factory.Dispose(); } private static Matrix ToSharpDxMatrix(LightspaceCompositorContracts.Matrix matrix) { return new Matrix( matrix.M11, matrix.M12, matrix.M13, matrix.M14, matrix.M21, matrix.M22, matrix.M23, matrix.M24, matrix.M31, matrix.M32, matrix.M33, matrix.M34, matrix.M41, matrix.M42, matrix.M43, matrix.M44); } private static ICompositor InitializeCompositor(bool useHost, string pathToHost) { // Initialize Compositor var compositor = useHost ? (ICompositor)new CompositorServiceClient(pathToHost) : new Compositor(); compositor.Run(); compositor.Parameters.InterPupillaryDistanceMeters = 0.063f; compositor.Parameters.InvertDepth = false; compositor.Parameters.UseFogging = true; compositor.Parameters.SetPlanes(0.1f, 100f); return compositor; } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Lightspace Compositor | Lightspace Compositor Documentation",
    "keywords": "Lightspace Compositor The project contains compositor renderer api that integrates with existing D3D11 renderers to render volumetric headset content. Please refer to Articles and API Documentation section for more information. Included API Dependencies compositorClient - A compositor client-side C# dependencies for client-host communication mode. compositorHost - A compositor host executable for client-host communication mode. compositorLibrary - A core compositor library used for direct integration with compositor. compositorNativeClient - A compositor client-side C++ dependencies for client-host communication mode. Acknowledgements The Lightspace Technologies acknowledges the use of following projects (code snippets, libraries, tools, etc.) in Lightspace Compositor: https://github.com/tylerjensen/ServiceWire - Apache License Version 2.0, used for Client-Host IPC communication. https://github.com/IntelRealSense/librealsense - Apache License Version 2.0, used for tracking, redistributed with tracking service. https://github.com/dotnet/corert - MIT License, used for native client-host communication. https://github.com/sharpdx/SharpDX - MIT License, used for rendering. https://dotnet.github.io/docfx/ - MIT License, used for documentation site generation."
  }
}